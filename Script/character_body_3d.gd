extends CharacterBody3D

@onready var plane = $"../Plane"

const SPEED = 5.0
const JUMP_VELOCITY = 4.5
var mouse_sensitivity = 0.002
var rings: Array[Ring] = []
var base_rings: Array[Ring] = []  # –ö–æ–ª—å—Ü–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –∑–µ–º–ª–µ

signal ring_is_taken



func _ready():
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
	#ring_is_taken.connect(move_to_hand())
	for child in $"../".get_children():
		if child is Ring:
			rings.append(child)
			
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª—å—Ü–∞
	for ring in rings:
		ring.stack_updated.connect(_on_ring_stack_updated)

func _physics_process(delta: float) -> void:
	# Add the gravity.
	if not is_on_floor():
		velocity += get_gravity() * delta

	# Handle jump.
	if Input.is_action_just_pressed("ui_accept") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var input_dir := Input.get_vector("ui_left", "ui_right", "ui_up", "ui_down")
	var direction := (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if direction:
		velocity.x = direction.x * SPEED
		velocity.z = direction.z * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)

	move_and_slide()
	
func move_to_hand():
	pass
	
func _input(event):
	if event is InputEventMouseMotion and Input.mouse_mode == Input.MOUSE_MODE_CAPTURED:
		rotate_y(-event.relative.x * mouse_sensitivity)
		$XRCamera3D.rotate_x(-event.relative.y * mouse_sensitivity)
		$XRCamera3D.rotation.x = clampf($XRCamera3D.rotation.x, -deg_to_rad(70), deg_to_rad(70))
	if event.is_action_pressed("ui_cancel"):
		Input.mouse_mode = Input.MOUSE_MODE_VISIBLE
	
	if event.is_action_pressed("click"):
		if Input.mouse_mode == Input.MOUSE_MODE_VISIBLE:
			Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
			
			
func _on_ring_stack_updated(_ring: Ring) -> void:
	_update_base_rings()
	_print_all_stacks()
	_check_win()

func _update_base_rings() -> void:
	base_rings.clear()
	
	# –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª—å—Ü–∞ –±–µ–∑ –Ω–∏–∂–Ω–∏—Ö –∫–æ–ª–µ—Ü (—Å—Ç–æ—è—â–∏–µ –Ω–∞ –∑–µ–º–ª–µ)
	for ring in rings:
		if not ring.ring_below:
			base_rings.append(ring)

func _print_all_stacks() -> void:
	print("\nCurrent Stacks Status:")
	for base_ring in base_rings:
		var stack = _get_stack_from_base(base_ring)
		print("Stack starting with ", base_ring.name, ":")
		_print_stack(stack)
	print("------------------------")

func _get_stack_from_base(base_ring: Ring) -> Array[Ring]:
	var stack: Array[Ring] = []
	var current_ring := base_ring
	
	while current_ring != null:
		stack.append(current_ring)
		if current_ring.rings_above.is_empty():
			break
		current_ring = current_ring.rings_above[0]
	
	return stack

func _print_stack(stack: Array[Ring]) -> void:
	var indent := "\t"
	for i in stack.size():
		var ring := stack[i]
		print(indent.repeat(i), "‚îî‚îÄ ", ring.name, 
			" (radius: ", ring.ring_type.radius, ")")

func _check_win() -> void:
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –±–∞–∑–æ–≤—ã–π —Å—Ç–µ–∫
	for base_ring in base_rings:
		var stack = _get_stack_from_base(base_ring)
		
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–ª–∏–Ω–∞ —Å—Ç–µ–∫–∞ —Å —Ç—Ä–µ–±—É–µ–º–æ–π
		if stack.size() == plane.rings.size():
			var is_correct = true
			
			# –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∏–ø—ã –∫–æ–ª–µ—Ü
			for i in stack.size():
				if stack[i].ring_type != plane.rings[i]:
					is_correct = false
					break
			
			# –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–µ–∫
			if is_correct:
				print("–ü–æ–±–µ–¥–∞! –°—Ç–µ–∫ —Å–æ–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
				# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ
				# –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å UI, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É –∏ —Ç.–¥.
				_show_win_message()
				return
	
	# –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
	# print("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–µ–∫...")

func _show_win_message() -> void:
	# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ UI —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ø–æ–±–µ–¥–µ
	print("======================")
	print("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ")
	print("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ –ø–∏—Ä–∞–º–∏–¥—É!")
	print("======================")
	
	# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ
	# –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º—ã—à—å
	Input.mouse_mode = Input.MOUSE_MODE_VISIBLE
	
	# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—É–∑—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
	# get_tree().paused = true
